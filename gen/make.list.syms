#!/usr/local/bin/perl
##
##  make.list.syms -- make list.syms
##
##  Copyright (c) 2000  William Setzer
##
##  You may distribute under the terms of either the Artistic License
##  or the GNU General Public License, as specified in the README file.

use lib 'gen';
use Gen;

open OUT, "> list.syms"    or die "Can't open list.syms: $!\n";

process_DATA_chunk  \&print_line;
process_functions   \&do_function;
process_variables   \&do_variable;
process_typedefs    \&do_typedef;

close OUT;

###
##  The helpers
#
sub print_line { print OUT @_ }

sub do_function {
    my $fun = shift;

    next unless $fun->{DOIT};
    next if $fun->{SPEC} =~ /{notest}/;

    my @call;
    foreach $arg (@{$fun->{ARGS}}) {
	push @call, lookup($arg->{OUT} ? 'TEST_OUT' : 'TEST_NOR', $arg);
    }

    my $w   = ($fun->{UNI} =~ /[{|](?:mv)?w[}|]/) ? "w" : "";
    my $def = $w . $fun->{NAME} . "(" . join(',', @call) . ")";

    print OUT "E  $def\n";
    print OUT "I  $def\n" if $fun->{DECL} eq 'int/void';
}

sub do_variable {
    my $var = shift;

    next unless $var->{DOIT};

    print OUT "V  $var->{NAME}\n";
}

sub do_typedef {
    my $typ = shift;

    next unless $typ->{DOIT};

    print OUT "T  $typ->{DECL}\n";
}

__END__
## This file is automatically generated; changes will be lost.
##
##   V = variable existence check
##   E = function existence check,
##   I = function "returns int?" check
##   T = typedef existence check

