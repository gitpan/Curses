#!/usr/local/bin/perl
##
##  make.list.syms -- make list.syms
##
##  Copyright (c) 2000  William Setzer
##
##  You may distribute under the terms of either the Artistic License
##  or the GNU General Public License, as specified in the README file.

my $OUT = {
    'int'      => 'LINES',
    'char *'   => '0',          # bleah
    'chtype *' => '0',          # bleah
    'short'    => '0',          # bleah
};

my $DECL = {
    'Window'   => 'stdscr',
};

my $MORPH = {
    'WINDOW *' => 'Window',
};


open INF,  "gen/list.fun"  or die "Can't open list.fun: $!\n";
open INV,  "gen/list.var"  or die "Can't open list.var: $!\n";
open OUT, "> list.syms"    or die "Can't open list.syms: $!\n";
open STDOUT, ">&OUT"       or die "Can't redir STDOUT: $!\n";


########################
print <<AAA;
## This file is automatically generated; changes will be lost.
##
##   V = variable existence check, E = function existence check,
##   I = function "returns int?" check

AAA
########################


my $c_pattern = '^\s* (?:const \s+)? ( (?:[{<|] [^}>|]+ [}>|])* )' .
    '\s* (\S+) (\s+ \*+)? \s* ( [{<|] \w+ [}>|] )* (\w+)';

while (<INF>) {
    while (s/\\\n//) {
	$_ .= <INF>;
	die if eof();
    }

    next unless /^> (.+)\((.+)\);/x;

    my $lhs  = $1;
    my $args = $2;

    unless ($lhs =~ /$c_pattern/xo) {
	warn "WARNING: bad function proto [$lhs]\n";
	return;
    }

    my $fspec = $1;
    my $fdecl = $MORPH->{$2 . $3} || $2 . $3;
    my $funi  = $4;
    my $fname = $5;

    next if $fspec =~ /{notest}/;

    my $arg;
    my $num   = 0;
    my @call;

    foreach $arg (split /\s*,\s*/, $args) {
	next if $arg eq 'void';

	unless ($arg =~ /$c_pattern/xo) {
	    print "/* WARNING: bad arg proto [$arg] for [$fname] */\n";
	    next;
	}
	my $spec = $1;
	my $decl = $MORPH->{$2 . $3} || $2 . $3;
	my $norm = $DECL->{$decl} || 0;
	my $out  = $OUT->{$decl}  || 0;

	push @call, ($spec =~ /{out}/) ? $out : $norm;
	$num++;
    }

    my $w   = ($funi =~ /[{|](?:mv)?w[}|]/) ? "w" : "";
    my $def = $w . $fname . "(" . join(',', @call) . ")";

    print "E  $def\n";
    print "I  $def\n" if $fdecl eq 'int/void';
}

while (<INV>) {
    while (s/\\\n//) {
	$_ .= <INV>;
	die if eof();
    }

    next unless /^> (.+);/x;

    my $lhs  = $1;

    unless ($lhs =~ /$c_pattern/xo) {
	warn "WARNING: bad function proto [$lhs]\n";
	return;
    }
    my $fname = $5;

    print "V  $fname\n";
}
close OUT;
close INV;
close INF;



__END__
